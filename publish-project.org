# -*- org-confirm-babel-evaluate: nil; -*-
#+TITLE: Publishing Build Script
#+HTML_HEAD: "<link rel='stylesheet' type='text/css' href='../css/org-mode.css'>"

* Initialze the code needed to publish org-mode files
This code has been blindly stolen from [[http://dale.io/blog/automated-org-publishing.html][batch mode publishing]].

** Load up the required packages.
#+BEGIN_SRC emacs-lisp :results silent :tangle yes
  (package-initialize)
  (require 'org)
  (require 'ox)
  (require 'ox-publish)
#+END_SRC

** Who am I?
#+BEGIN_SRC emacs-lisp :results silent :tangle yes
  (setq user-full-name "John Krumpotick")
  (setq user-mail-address "softwaredevelopment@simplexapparati.com")
#+END_SRC

** Initialize the publishing properties
If a file does not export to HTML it can be because an of unset variable in a source block.

#+BEGIN_SRC emacs-lisp :results silent :tangle yes
  (setq org-publish-project-alist '(("simple-publish"
                                     :base-directory "."
                                     :base-extension "org"                         ; Only process org-mode files.
                                     :publishing-directory "./published"
                                     :publishing-function org-html-publish-to-html
                                     :section-numbers nil
                                     :with-toc nil
                                     :html-extension "html"
                                     :html-head-include-scripts nil                ; Do not include the default javascript.
                                     :html-head-include-default-style nil          ; Do not include the default css styles.
                                     :html-html5-fancy t                           ; Supposedly this is required for HTML5 output.
                                     :html-doctype "html5"                         ; And yes, render out HTML5.
                                     :html-preamble nil
                                     :html-postamble nil
                                     :recursive t)))
#+END_SRC

** Clean and Build
Org uses [[http://orgmode.org/guide/Publishing.html][timestamps]] to track when a file has changed. The above functions normally only publish changed files. You can override this and force publishing of all files by giving a prefix argument to any of the commands above."

This [[https://stackoverflow.com/questions/21258769/using-emacs-org-mode-how-to-publish-the-unchanged-files-in-a-project][post]] has an example of how to "force" a build.

This block invokes org-mode and then tangles the el file.  The idea is to use a command like the following.
#+BEGIN_EXAMPLE
  emacs --eval "(setq force-all nil)" --batch -l ./publish-project.el
#+END_EXAMPLE

#+BEGIN_SRC emacs-lisp :results silent :tangle yes
  (org-mode)
  (org-publish-project "simple-publish" force-all)
#+END_SRC

#+BEGIN_SRC shell :results silent
  rm -fr ./published/*
#+END_SRC

#+BEGIN_SRC emacs-lisp :results silent 
  (org-publish-current-project "simple-publish" nil) ; Rebuild files that have a fresh time stamp.
#+END_SRC

#+BEGIN_SRC emacs-lisp :results silent 
  (org-publish-current-project "simple-publish" t)   ; Rebuild all files even if the time stamps have not changed.
#+END_SRC
