# -*- org-confirm-babel-evaluate: nil; -*-
#+TITLE: Publishing Build Script
#+SETUPFILE: publish-setup.org

** Initialze the code needed to publish org-mode files
   A lot of inspiration has been taken from the [[http://orgmode.org/worg/org-tutorials/org-publish-html-tutorial.html][tutorial]] in the manual.
   I also stole code from [[http://dale.io/blog/automated-org-publishing.html][batch mode publishing]].
   Run (org-babel-tangle), *C-c C-v t*, while this file is open in emacs to generate the literate elisp build file.

*** Load up the required packages.
#+BEGIN_SRC emacs-lisp :results silent :tangle ../publish-project.el
  (package-initialize)
  (require 'org)
  (require 'ox)
  (require 'ox-publish)
#+END_SRC

*** If it's not working you can set the debug output on.
# #+BEGIN_SRC emacs-lisp :results silent :tangle ../publish-project.el
#+BEGIN_SRC emacs-lisp :results silent :tangle no
  (setq debug-on-error t)
#+END_SRC

** Initialize the publishing properties
These properties will be common to all of the source files. If a file does not export to HTML it can be because an of unset variable in a source block.

#+BEGIN_SRC emacs-lisp :results silent :tangle ../publish-project.el
  (setq org-publish-project-alist
      '(
        ;; org files to be exported to HTML.
        ("simple-publish-org"
         :author "Your Name Here"
         :base-directory "./org"
         :base-extension "org"
         :publishing-directory "./published"
         :publishing-function org-html-publish-to-html
         :section-numbers nil
         :with-toc nil
         :time-stamp-file nil
         :html-extension "html"
         :html-head-include-scripts nil
         :html-head-include-default-style nil
         :html-html5-fancy t
         :html-doctype "html5"
         :html-preamble nil
         :html-postamble nil
         :exclude "publish-[a-z]+.org"
         :recursive t)

        ;; CSS files to be copied to the published folder.
        ("simple-publish-css"
         :base-directory "./org/css"
         :base-extension "css"
         :publishing-directory "./published/css"
         :publishing-function org-publish-attachment)

        ;; Javascript files to be copied to the published folder.
        ("simple-publish-js"
         :base-directory "./org/js"
         :base-extension "js"
         :publishing-directory "./published/js"
         :publishing-function org-publish-attachment)

        ;; Publish all of the components in order.
        ("simple-publish" :components ("simple-publish-org" "simple-publish-css" "simple-publish-js"))
      )
  )
#+END_SRC

** A simple shell script to run emacs in batch mode for publishing
  Org uses [[http://orgmode.org/guide/Publishing.html][timestamps]] to track when a file has changed. The above functions normally only publish changed files. You can override this and force publishing of all files by giving a prefix argument to any of the commands above."

  This [[https://stackoverflow.com/questions/21258769/using-emacs-org-mode-how-to-publish-the-unchanged-files-in-a-project][post]] has an example of how to "force" a build.
  The code was not automatically set to execute as described in the [[http://orgmode.org/manual/shebang.html#shebang][manual]] with a shebang.

#+BEGIN_SRC shell :results silent :tangle ../publish-project :tangle-mode (identity #o764)
#!/usr/bin/env bash

if [ $1 == 't' ]
   then
       # publish-project t will build all the HTML files.
       emacs --batch --load publish-project.el --eval '(org-publish "simple-publish" t)'
   else
       # publish-project nill will build only the modified HTML files.
       emacs --batch --load publish-project.el --eval '(org-publish "simple-publish" nil)'
fi
#+END_SRC
