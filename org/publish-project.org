# -*- org-confirm-babel-evaluate: nil; -*-
#+TITLE: Publishing Build Script
#+SETUPFILE: publish-setup.org

** Initialze the code needed to publish org-mode files
   A lot of inspiration has been taken from the [[http://orgmode.org/worg/org-tutorials/org-publish-html-tutorial.html][tutorial]] in the manual.
   I also stole code from [[http://dale.io/blog/automated-org-publishing.html][batch mode publishing]].
   Run (org-babel-tangle), *C-c C-v t*, while this file is open in emacs to generate the literate elisp build file.

*** Load up the required packages.
#+BEGIN_SRC emacs-lisp :results silent :tangle ../publish-project.el
  (package-initialize)
  (require 'org)
  (require 'ox)
  (require 'ox-publish)
#+END_SRC


** Initialize the publishing properties
These properties will be common to all of the source files. If a file does not export to HTML it can be because an of unset variable in a source block.

#+BEGIN_SRC emacs-lisp :results silent :tangle ../publish-project.el
  (setq org-publish-project-alist '(("simple-publish"
                                     :author "Your Name Here"
                                     :with-email "who@where"
                                     :base-directory "./org"
                                     :base-extension "org"                         ;; Only process org-mode files.
                                     :publishing-directory "./published"
                                     :publishing-function org-html-publish-to-html
                                     :section-numbers nil
                                     :with-toc nil
                                     :time-stamp-file nil
                                     :html-extension "html"
                                     :html-head-include-scripts nil                ;; Do not include the default javascript.
                                     :html-head-include-default-style nil          ;; Do not include the default css styles.
                                     :html-html5-fancy t                           ;; Supposedly this is required for HTML5 output.
                                     :html-doctype "html5"                         ;; And yes, render out HTML5.
                                     :html-preamble nil
                                     :html-postamble nil
                                     :exclude "publish-[a-z]+.org"                 ;; Files prefixed with 'publish-' should not be exported.
                                     :recursive t)))
#+END_SRC

*** Clean and Build
  Org uses [[http://orgmode.org/guide/Publishing.html][timestamps]] to track when a file has changed. The above functions normally only publish changed files. You can override this and force publishing of all files by giving a prefix argument to any of the commands above."

  This [[https://stackoverflow.com/questions/21258769/using-emacs-org-mode-how-to-publish-the-unchanged-files-in-a-project][post]] has an example of how to "force" a build.

  This command would force a build of all the HTML5 files.  But I use [[file:~/GitHub/simple-publish/package.json::"html-all":%20"emacs%20--batch%20--load%20publish-project.el%20--eval%20'(org-publish%20\"simple-publish\"%20t)'"][npm run html-all]], see package.json
#+BEGIN_EXAMPLE
  emacs --batch --load publish-project.el --eval '(org-publish "simple-publish" t)'
#+END_EXAMPLE
